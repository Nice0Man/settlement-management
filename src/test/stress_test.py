import asyncio
import time
from datetime import datetime
import random

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from src.core.models import ResourceOperation
from src.config import DATABASE_URL

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


# –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def stress_test():
    async with AsyncSessionLocal() as session:
        start_time = time.time()

        # –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (10000 –∑–∞–ø–∏—Å–µ–π)
        operations = [
            ResourceOperation(
                resource_id=1,
                settlement_id=1,
                date=datetime.now(),
                quantity=-random.randint(10, 500),
                operation_type="consumption",
            )
            for _ in range(10000)
        ]
        session.add_all(operations)
        await session.commit()

        elapsed_time = time.time() - start_time
        print(
            f"üöÄ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 10 000 –∑–∞–ø–∏—Å–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥."
        )


if __name__ == "__main__":
    asyncio.run(stress_test())
